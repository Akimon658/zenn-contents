{
  "title": "CKA関連\n",
  "closed": false,
  "archived": false,
  "created_at": "2021-04-27",
  "comments": [
    {
      "author": "azukiazusa",
      "created_at": "2021-04-27",
      "body_markdown": "# static Podの作成\n\n## kubeletの設定ファイルからstaticPodPathの設定値を参照する\n\nkubeletの設定ファイルは`/var/lib/kubelet/config.yaml`に配置されています。\nドキュメントに記載されているので暗記する必要はありません。\n\nhttps://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/kubelet-integration/#kubeadm-init-%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%AE%E6%B5%81%E3%82%8C\n\n> kubeletの設定ファイルの中で、staticPodPath: <ディレクトリの場所>というフィールドを使用すると、kubeletがこのディレクトリを定期的にスキャンして、YAML/JSONファイルが作成/削除されるたびに、static Podの作成/削除が行われるようになります。\n\nhttps://kubernetes.io/ja/docs/tasks/configure-pod-container/static-pod/#static-pod-creation\n\n```sh\n$ cat /var/lib/kubelet/config.yaml | grep staticPodPath\nstaticPodPath: /etc/kubernetes/manifests\n```\n\n## staticPodPath配下にマニフェストを配置する\n\n`staticPodPath`の場所がわかったら、いつもどおりにPodのマニフェストを作成して`staticPodPath`の場所に配置します。\n\n```sh\n$ cd /etc/kubernetes/manifests\n$ kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx-pot.yaml\n$ ls\netcd.yaml  kube-apiserver.yaml  kube-controller-manager.yaml  kube-scheduler.yaml  nginx-pot.yaml\n```\n\n## static Podの作成を確認\n\n`staticPodPath`配下にマニフェストを配置すると自動的にstatic Podが作成されます。\n`kubectl get po`コマンドでPodが作成されていることを確認します。static Podはサフィックスとして`-<nodeの名前>`が付与されています。\n\n\n```sh\n$ kubectl get po\nNAME                 READY   STATUS    RESTARTS   AGE\nnginx-controlplane   1/1     Running   0          23s\n```\n"
    },
    {
      "author": "azukiazusa",
      "created_at": "2021-04-27",
      "body_markdown": "# エイリアスの設定\n\n試験中は`kubectl`コマンドをよく使用するのでエイリアスを設定しておくと時間短縮になります。\n試験が開始したら次のコマンドを打ちます。\n\n```sh\n$ alias k=kubectl\n```"
    },
    {
      "author": "azukiazusa",
      "created_at": "2021-04-27",
      "body_markdown": "# マニフェストの雛形をコマンドから作成する\n\n`-o yaml --dry-run=client`オプションを付与することによって、大抵のリソースに対してコマンドからマニフェストの雛形を作成できるので大変重宝します。\n\n## Pod\n\n```sh\n$ kubectl run nginx --image nginx -o yaml --dry-run=client > nginx.yaml\n```\n\n## Deployment \n\n```sh\n$ kubectl create deployment nginx --image nginx -o=yaml --dry-run=client > deployment.yaml\n```\n\n## Service\n\n```sh\n$ kubectl expose deployment nginx --port=80 --dry-run=client -o=yaml > service.yaml\n```"
    },
    {
      "author": "azukiazusa",
      "created_at": "2021-04-28",
      "body_updated_at": "2021-04-28",
      "body_markdown": "# etcdのバックアップ\n\n## static Podのetcdの定義を確認する\n\n```sh\n$ /etc/kubernetes/manifests\n$ cat etcd.yamlcat etcd.yaml\n```\n\n`command`を確認します。\n\n```sh\nspec:\n  containers:\n  - command:\n    - etcd\n    - --advertise-client-urls=https://172.17.0.46:2379\n    - --cert-file=/etc/kubernetes/pki/etcd/server.crt\n    - --client-cert-auth=true\n    - --data-dir=/var/lib/etcd\n    - --initial-advertise-peer-urls=https://172.17.0.46:2380\n    - --initial-cluster=controlplane=https://172.17.0.46:2380\n    - --key-file=/etc/kubernetes/pki/etcd/server.key\n    - --listen-client-urls=https://127.0.0.1:2379,https://172.17.0.46:2379\n    - --listen-metrics-urls=http://127.0.0.1:2381\n    - --listen-peer-urls=https://172.17.0.46:2380\n    - --name=controlplane\n    - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt\n    - --peer-client-cert-auth=true\n    - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key\n    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\n    - --snapshot-count=10000\n    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\n```\n\n下記のetcdのバックアップのコマンドを`command`で確認した値で置き換えて実行します。\n\nhttps://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster\n\n```sh\n$ ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key \\\n  snapshot save backup.db\nSnapshot saved at backup.db\n```\n\n確認を行います。\n\n```sh\n$ ETCDCTL_API=3 etcdctl --write-out=table snapshot status backup.db\n+----------+----------+------------+------------+\n|   HASH   | REVISION | TOTAL KEYS | TOTAL SIZE |\n+----------+----------+------------+------------+\n| 613180e5 |     7698 |       1435 |     2.6 MB |\n+----------+----------+------------+------------+\n```"
    },
    {
      "author": "azukiazusa",
      "created_at": "2021-04-29",
      "body_markdown": "# kubeconfigのトラブルシューティング\n\n誤っている箇所の確認。\n\n```sh\n$ kubectl claster-info --kubeconfig=<path-to-kubeconfig>\n```"
    },
    {
      "author": "azukiazusa",
      "created_at": "2021-04-30",
      "body_markdown": "# explainと --helpコマンド\n\n## explain\nマニフェストの記述方法がわからなくなったときは、`explain`コマンドを使用します。\n\n```sh\nkubectl explain <type>.<fieldName>[.<fieldName>]\n```\n例えば、PersistentVolumeの`hostPath`の書き方がわからなくなったときには\n\n```sh\n$ kubectl explain pv.spec --recursive | grep -i hostpath\n   hostPath     <Object>\n```\n\n`--recursive`は、詳細を表示しないオプションです。\n結果は`<Object>`と表示されているので、更に掘り下げて確認します。\n\n```sh\n$ kubectl explain pv.spec.hostPath\nKIND:     PersistentVolume\nVERSION:  v1\n\nRESOURCE: hostPath <Object>\n\nDESCRIPTION:\n     HostPath represents a directory on the host. Provisioned by a developer or\n     tester. This is useful for single-node development and testing only!\n     On-host storage is not supported in any way and WILL NOT WORK in a\n     multi-node cluster. More info:\n     https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n\n     Represents a host path mapped into a pod. Host path volumes do not support\n     ownership management or SELinux relabeling.\n\nFIELDS:\n   path <string> -required-\n     Path of the directory on the host. If the path is a symlink, it will follow\n     the link to the real path. More info:\n     https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n\n   type <string>\n     Type for HostPath Volume Defaults to \"\" More info:\n     https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n```\n\n`hostPath`には`path`フィールド指定する必要があることがわかります。\nマニフェストには次のように記載すればよいことがわかりました。\n\n```yaml\nhostPath: \n  path: \"/mnt/data\"\n```\n\n## --help\n\n宣言的な方法でリソースを作成するときのオプションの指定方法がわからなくなったときには、`--help`コマンドを利用します。\n\n```sh\n# pod\n$ kubectl run --help\n# service\n$ kubectl expose --help\n$ kubectl create <type> --help\n```\n\nサービスを作成するときに、サービス名を指定する方法を確認します。\n\n```sh\n$ kubectl expose --help\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that\nresource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a\nservice only if its selector is convertible to a selector that service supports, i.e. when the selector contains only\nthe matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all\nwill be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the\nresource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\nExamples:\n  # Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000.\n  kubectl expose rc nginx --port=80 --target-port=8000\n  \n  # Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\",\nwhich serves on port 80 and connects to the containers on port 8000.\n  kubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n  \n  # Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n  kubectl expose pod valid-pod --port=444 --name=frontend\n  \n  # Create a second service based on the above service, exposing the container port 8443 as port 443 with the name\n\"nginx-https\"\n  kubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n  \n  # Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n  kubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n  \n  # Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on\nport 8000.\n  kubectl expose rs nginx --port=80 --target-port=8000\n  \n  # Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000.\n  kubectl expose deployment nginx --port=80 --target-port=8000\n\nOptions:\n      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in\nthe template. Only applies to golang and jsonpath output formats.\n      --cluster-ip='': ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create\na headless service.\n      --dry-run='none': Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be\nsent, without sending it. If server strategy, submit server-side request without persisting the resource.\n      --external-ip='': Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP\nis routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager='kubectl-expose': Name of the manager used to track field ownership.\n  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to expose a service\n      --generator='service/v2': The name of the API generator to use. There are 2 generators: 'service/v1' and\n'service/v2'. The only difference between them is that service port in v1 is named 'default', while it is left unnamed\nin v2. Default is 'service/v2'.\n  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels='': Labels to apply to the service created by this call.\n      --load-balancer-ip='': IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used\n(cloud-provider specific).\n      --name='': The name for the newly created object.\n  -o, --output='': Output format. One of:\njson|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.\n      --overrides='': An inline JSON override for the generated object. If this is non-empty, it is used to override the\ngenerated object. Requires that the object supply a valid apiVersion field.\n      --port='': The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol='': The network protocol for the service to be created. Default is 'TCP'.\n      --record=false: Record current kubectl command in the resource annotation. If set to false, do not record the\ncommand. If set to true, record the command. If not set, default to updating the existing annotation value only if one\nalready exists.\n  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage\nrelated manifests organized within the same directory.\n      --save-config=false: If true, the configuration of current object will be saved in its annotation. Otherwise, the\nannotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector='': A label selector to use for this service. Only equality-based selector requirements are supported.\nIf empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity='': If non-empty, set the session affinity for the service to this; legal values: 'None',\n'ClientIP'\n      --target-port='': Name or number for the port on the container that the service should direct traffic to.\nOptional.\n      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The\ntemplate format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type='': Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n\nUsage:\n  kubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name]\n[--name=name] [--external-ip=external-ip-of-service] [--type=type] [options]\n\nUse \"kubectl options\" for a list of global command-line options (applies to all commands).\n```\n\nどうやら`--name`オプションを使うようです。確認してみましょう。\n\n```sh\n$ kubectl expose po nginx --name=nginx-service --port 80 --dry-run=client -o yaml\napiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: nginx\n  name: nginx-service\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    run: nginx\nstatus:\n  loadBalancer: {}\n```\n"
    }
  ]
}